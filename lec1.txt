====================================== GIT COMMANDS & USES ===============================================
1. git clone <url>-- it is used to download the files from the server or internet and download it to the computers.
                    if we give HTTPS URL Name then it will ask for our Git credentials but if we use public SSH key
                    in order to authenticate and it will not ask for any credentials.

# To keep tracking for the changes made to a file--
2.1 git add filename.extension : will track the mentioned file name, means it will save the changes made to it 
                                (better to say it will take snapshots of it and apply the changes once commited) 
                                but it will not commited yet. To make it commit we have another command.

# To tell the Get repository to save my sanpshot of the current state of the repository keeping track of any changes that 
  has been made to these files that i have added using git add--
2.2 git commit -m "message" : This message is known as commit message, it is description of what chnages we have made in this 
   most recent commit, because over time as we work on a big project, we are probably going to make lots of commits (means 
   lots of changes commit again and again) but i want  to refer back to previous commit, but it's only valuable to do so if you
   can identify in which commit you made a particular change.
   Example: git commit -m "I have added sum func and fib rcrsn func"

# to reflect our changes online:
The changes we were making above were only happening on our own computer not at the github repository, if i want to push those changes to 
GitHub then we gonna need additional command.

# first lets check our git status
3. git status: git run the program and tell me that
   Currently On branch master
   Your branch is ahead of 'origin/master' by 1 commit.
   (use "git push" to publish your local commits)

# so to push the changes to server we will use "git push" command, so that they are reflected there:
4. git push: whatever changes we have made will be pushed to GitHub.

# if we want to all the files that have been changed and commit at same time, the shorthand is git comit -am
5. git commit -am : commit all the changes that have been made (-am : here a means all and m means also provide a message).
                    So we can combine "git add step" and "git commit step" into just single step. By saying commit all
                    of the files that have been changed, then i'll provide a message.

# We can reverse the above process. Suppose if we want pull or download the latest version of the repository from 
  the server then,  in order to do that we use "git pull" command
6. git pull : to download the latest version of repository from the server
   What it does is, take the changes that currently exists on the GitHub and go ahead and pull the most recent changes 
   down. So that i and my local version of repository have the latest version of all the code that is currently on the GitHub.

# Merge Conflicts: occurs when two or more persond commit changes to for the same repository.
How Merge Conflicts look like:
<<<<what changes i have made>>>> (at any part of same file)
=====
      what changes made by other person(at any part of the same file)
>>>>hash_number generated by GitHub

7. So how to resolve this Conflicts?
- We can use "git commit -am "Fix merge conflicts""
  then push back it to the GitHub.
  We will see that both of the changes has been merged together.

# To keep track all of the changes that have been made in a particular repository.
8. git log: (It will show each commit that have been made)
It will give a log for each commit in a format given below.

commit hash_number : what was the hash of this particular commit.
Author: Who made the changes.
Date: the Date on which the commit was made.
   "commit message"

# Suppose we have made the changes that we didn't mean to and we want to go back to previous commit:
9. git reset : to roll back to previous commit, it takes the current state of repository and revert it back
   previous version of the repository.

   Two common syntax to achieve that:
   - git reset --hard <commit_hash> : to reset everything and got to the particular commit_hash
   - git reset --hard origin/master: If we want our current version of the repository and reset it back to whatever
                                     is on GitHub.


# BRANCHES [To work on different parts or version of repository at same time] :
  Branches are Git's way of working on different parts of the repository at the same time.
                                                            (start new feature) --> (keep working on new feature) <=== feature
                                                          /
  Example: (first commit) --> (changes) --> (more changes) --> (fix bug) <=== master <==HEAD
  So master branch is our default branch, which is generally going to contain the up-to-date stable version of our code. 
  And as we are working on newer things, newer additional features,  we might have some feature branch, where we are working on some
  other feature.

-- At any given time our focus is only on one of these two branches, and where our focus is, what is the current state of our repository
   is, is designated by something we call the head. So if the HEAD is pointing to masters, that means our repository right now is working on
   this (master) branch, where we have fixed the bug. But we can change the head,  we can switch what branch we want to look at, and we can 
   check out the feature branch and say let's look at that branch, and begin working on that as well. So by switching our HEADERS we work on 
   different branches. And only when we are satisfied, that you know what, this bug is fixed, and this feature is in satisfactory place, 
   then after all of that we can merge these changes back together. So that everything comes back onto this unified master branch that has 
   all of latest code.